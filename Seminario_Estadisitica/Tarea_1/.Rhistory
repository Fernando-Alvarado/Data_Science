#Para la parte b) de los incisos
for (i in 1:length(N_muestras)) {
N <- N_muestras[i]
for (j in 1:ncol(mat)) {
r <- mat[i, j]
# Generar la trayectoria W_r_k
W_r_k <- realizacion_W_r_k(N, r, Z_k)
# Generar los puntos de tiempo en el intervalo [0, 1]
k_points <- k_array(N, r)
# Asegúrate de que las longitudes de k_points y W_r_k sean iguales
plot(k_points, W_r_k, type = "l", col = "red",
main = paste("Realización del Proceso W^{(r)}_k, con r =", r, "y N =", N),
ylab = "W_r_k", xlab = "k")
}
}
#Para la parte c, donde simulamos el browniano_geometrico
for (N in N_muestras) {
plot(k_modificado(N), realizacion_Brown(N, N, p_estimada, alpha), type = "l", col="black",
main = paste("Simulacion del Browniano Geometrico con N =", N, "y r =", r), ylab="Xn", xlab="n")
}
##Conclusiones
##Podemos observar que mientras mas vamos haciendo iteraciones, nuestro modelo se va hacercando mas a un movieminto browniano, geomtrico, como se esperaba en clase
##Tambien podemos observar que el ajuste en la S_k, que hace que sea martngala, provoca que la simulacion haga un linea recta, como se esperaba en la teoria
##Finalmente, podemos observar que el modelo de browniano geometrico, se ajusta a la formula dada en la teoria y lo que me sorprendio, fue que no necesitamos usar una normal
##para aproxima el modelo.
#Ejercicio 2
sigma2 <- 2 * alpha # Varianza log-normal
sigma <- sqrt(sigma2) # Desviación estándar
# Simulando 100 variables lognormales(0, 2alpha)
accion_call <- function(X_i, alpha, sigma) {
X_i <- rlnorm(100, meanlog = 0, sdlog = sigma) #Obteniendo las variables lognormales
vec_precios <- numeric(length(X_i)) #Haciendo el vector donde iran los precios de las acciones
for (i in 1:length(X_i)) {
d <-  110 * X_i[i] - 113 #Formula dada en la teoria
discounted_value <-    max(exp(-alpha * d), 0)        # e^(-alpha * (110 * X_i - 113)^{+})
vec_precios[i] <- discounted_value
}
return(vec_precios)
}
print(sum(accion_call(X_i, alpha, sigma))/100)
# Definiendo la función para calcular el precio de una opción call según el teorema 112 de las notas vistas en clase
call_option_price <- function(x0, K, alpha, sigma, T) {
d1 <- (log(x0 / K) + (alpha + (sigma^2) / 2) * T) / (sigma * sqrt(T)) #Caclulando d1
d2 <- d1 - sigma * sqrt(T) #Calculando d2
#Checando los valores de la Phi, para poder calcular el precio de la opcion
Phi_d1 <- pnorm(d1) #Distribuciones dadas por R
Phi_d2 <- pnorm(d2)
# Formula del precio de la accion
v0 <- x0 * Phi_d1 - exp(alpha * T) * K * Phi_d2
return(v0)
}
# Parametros a introducir, para comparar con la simulacion anteriror
x0 <- 110
K <- 113
alpha <- 0.04
sigma2 <- 2 * alpha
sigma <- sqrt(sigma2)
# Calcular el precio de la opción call
call_price <- call_option_price(x0, K, alpha, sigma, 1)
# Mostrar el precio de la opción
print(call_price)
#Comparando los precios, por el momento no son muy parecdios, pero ya no pude ver que salia mal con la simulacion,
#fue un semestre muy pesado para mi, pero puro trabajo honesto
#Codigo ehco por Alvarado Placios Fernando
rm(list = ls(all.names = TRUE))
gc()
library(Rfit)
library(Rfit)
#Corriendo los datos de la tabla para poder hacer el analisis de los datos
data <- data(quail)  # Carga el conjunto de datos quail
print(data)  # Muestra el conjunto de datos
View(quail)
print(data$treat)  # Muestra el conjunto de datos
print(data.treat)  # Muestra el conjunto de datos
#Corriendo los datos de la tabla para poder hacer el analisis de los datos
str(quail)
data(PlantGrowth)
help(PlantGrowth)
summary(PlantGrowth)
is.factor(PlantGrowth$group)
X11()
boxplot(weight ~ group, data = PlantGrowth, col = "white", outline=FALSE)
stripchart(weight ~ group, data = PlantGrowth,
method = "jitter",
pch = 19,
col = 2:4,
vertical = TRUE,
add = TRUE)
#Paquetes a usar
library(ggplot2)#Paquete para hacer graficos
library(Rfit)#Paquete para extraer los datos, con los que vamos a trabajar
library(PMCMRplus) #Paquete para hacer pruebas de comparacion de medias
install.packages("Rfit")
#Corriendo los datos de la tabla para poder hacer el analisis de los datos
str(quail) #Viendo los datos que acabamos de extraer
# 1) Presente el boxplot de la variable LDL para cada tratamiento (grupo) y comente.
ggplot(quail, aes(x = factor(treat), y = ldl)) +
geom_boxplot() +
labs(title = "Boxplot de LDL por cada Tratamiento",
x = "Tratamiento",
y = "LDL (Low Density Lipid Cholesterol)") +
theme_minimal()
ggplot(quail, aes(x = factor(treat), y = ldl)) +
geom_boxplot() +
labs(title = "Boxplot de LDL por cada Tratamiento",
x = "Tratamiento",
y = "LDL (Low Density Lipid Cholesterol)") +
theme_minimal()
#Paquetes a usar
library(ggplot2)#Paquete para hacer graficos
library(Rfit)#Paquete para extraer los datos, con los que vamos a trabajar
library(PMCMRplus) #Paquete para hacer pruebas de comparacion de medias
install.packages("Rfit")
#Corriendo los datos de la tabla para poder hacer el analisis de los datos
str(quail) #Viendo los datos que acabamos de extraer
# 1) Presente el boxplot de la variable LDL para cada tratamiento (grupo) y comente.
ggplot(quail, aes(x = factor(treat), y = ldl)) +
geom_boxplot() +
labs(title = "Boxplot de LDL por cada Tratamiento",
x = "Tratamiento",
y = "LDL (Low Density Lipid Cholesterol)") +
theme_minimal()
install.packages("Rfit")
x11()
ggplot(quail, aes(x = factor(treat), y = ldl)) +
geom_boxplot() +
labs(title = "Boxplot de LDL por cada Tratamiento",
x = "Tratamiento",
y = "LDL (Low Density Lipid Cholesterol)") +
theme_minimal()
ggplot(quail, aes(x = factor(treat), y = ldl)) +
geom_boxplot() +
labs(title = "Boxplot de LDL por cada Tratamiento",
x = "Tratamiento",
y = "LDL (Low Density Lipid Cholesterol)") +
theme_minimal()+
stripchart(treat ~ ldl, data = quail,
method = "jitter",
pch = 19,
col = 2:4,
vertical = TRUE,
add = TRUE)
# Boxplot con puntos jitter
ggplot(quail, aes(x = factor(treat), y = ldl)) +
geom_boxplot(outlier.shape = NA, fill = "lightblue", color = "black") + # Boxplot sin outliers (opcional)
geom_jitter(aes(color = factor(treat)), width = 0.2, size = 2, alpha = 0.7) + # Puntos jitter
labs(title = "Boxplot de LDL por cada Tratamiento",
x = "Tratamiento",
y = "LDL (Low Density Lipid Cholesterol)") +
scale_color_manual(values = c("red", "green", "blue", "purple")) + # Colores personalizados
theme_minimal() +
theme(legend.position = "none") # Opcional, elimina la leyenda
fligner.test(treat ~ ldl, data = PlantGrowth) #A menos revisa que las varianzas se vean casi igual en los grupos
fligner.test(treat ~ ldl, data = quail) #A menos revisa que las varianzas se vean casi igual en los grupos
#3) Dependiendo de la respuesta anterior, realice una prueba adecuada para indicar si es plausible asumir que la varianza es similar en los cuatro grupos.
str(quail)
fligner.test(treat ~ ldl, data = quail) #A menos revisa que las varianzas se vean casi igual en los grupos
fligner.test(ldl ~ treat, data = quail) #A menos revisa que las varianzas se vean casi igual en los grupos
fligner.test(weight ~ group, data = PlantGrowth) #A menos revisa que las varianzas se vean casi igual en los grupos --------------------------------------------
#Si se rechaza, no te estreses ya que estamos trabajando con rangos
kruskal.test(ldl ~ treat, data = quail)
#5)Si la respuesta a la pregunta del inciso (iv) es negativa, indique si el tratamiento 2 reduce más los niveles de colesterol en comparación con el resto de tratamientos. Use  𝛼 = 0.1
levels(quail$treat) #Viendo los niveles de los tratamientos
quail$treat <- relevel(quail$treat, ref = "2") #Haciendo que el tratamiento 2 sea el de referencia
levels(quail$treat) #Viendo los niveles de los tratamientos
#Haciendo la prueba para ver si el tratamiento 2 es el mejor
summary(kwManyOneDunnTest(ldl ~ treat, data = quail))
#Haciendo la prueba para ver si el tratamiento 2 es el mejor
summary(kwManyOneDunnTest(ldl ~ treat, data = quail,  alternative = "less"))
#Haciendo la prueba para ver si el tratamiento 2 es el mejor
summary(kwManyOneDunnTest(ldl ~ treat, data = quail,  alternative = "greater"))
#Codigo ehco por Alvarado Placios Fernando
# Creación del dataframe con los datos de la tabla
depresion_data <- data.frame(
Paciente = 1:9,
x = c(1.53, 1.68, 1.88, 1.55, 3.06, 1.3, 0.5, 1.62, 2.48),
y = c(0.578, 1.06, 1.29, 1.06, 3.14, 1.29, 0.647, 0.598, 2.05)
)
# Mostrar el dataframe
print(depresion_data)
#Preimero veamos un ggplot de nuestros datos
ggplot(depresion_data, aes(x = x, y = y)) +
geom_point() +
labs(title = "Depresión",
x = "X",
y = "Y") +
theme_minimal()
ggplot(depresion_data, aes(x = x, y = y)) +
geom_boxplot(outlier.shape = NA, fill = "lightblue", color = "black") +
labs(title = "Depresión",
x = "X",
y = "Y") +
theme_minimal()
boxplot(depresion_data.x, data = depresion_data, ylim=c(0,100), xlab="Antes")
depresion_data <- data.frame(
Paciente = 1:9,
x = c(1.53, 1.68, 1.88, 1.55, 3.06, 1.3, 0.5, 1.62, 2.48),
y = c(0.578, 1.06, 1.29, 1.06, 3.14, 1.29, 0.647, 0.598, 2.05)
)
# Mostrar el dataframe
print(depresion_data)
#Preimero veamos un ggplot de nuestros datos
boxplot(depresion_data.x, data = depresion_data, ylim=c(0,100), xlab="Antes")
boxplot(depresion_data$x, depresion_data$y,
names = c("Antes", "Después"),
ylim = c(0, 4),
xlab = "Estado",
ylab = "Escala de Depresión",
main = "Boxplot: Escala de Depresión Antes y Después del Tratamiento")
boxplot(depresion_data$x, depresion_data$y,
names = c("Antes", "Después"),
ylim = c(0, 4),
xlab = "Estado",
ylab = "Escala de Depresión",
main = "Boxplot: Escala de Depresión Antes y Después del Tratamiento")+
scale_color_manual(values = c("blue", "purple"))
boxplot(depresion_data$x, depresion_data$y,
names = c("Antes", "Después"),
ylim = c(0, 4),
xlab = "Estado",
ylab = "Escala de Depresión",
main = "Boxplot: Escala de Depresión Antes y Después del Tratamiento",
col = c("blue", "purple"))
depresion_data$diff <- depresion_data$y - depresion_data$x
#Creando el modelo de regresion lineal
fit1 <- lm(diff ~ 1, data = depresion_data)
#Viendo el resumen del modelo
summary(fit1)
K=matrix(c(1), ncol=1, nrow=1, byrow=TRUE)
m=c(0)
summary(glht(fit1, linfct=K, rhs=m, alternative="greater"))
library(multcomp)
K=matrix(c(1), ncol=1, nrow=1, byrow=TRUE)
m=c(0)
summary(glht(fit1, linfct=K, rhs=m, alternative="greater"))
K=matrix(c(1), ncol=1, nrow=1, byrow=TRUE)
m=c(0)
summary(glht(fit1, linfct=K, rhs=m, alternative="less"))
depresion_data$diff <- depresion_data$x - depresion_data$y
#Creando el modelo de regresion lineal
fit1 <- lm(diff ~ 1, data = depresion_data)
#Viendo el resumen del modelo
summary(fit1)
#Queremos ver si el tratamiento ha sido efectivo, es decir, si ha reducido la escala de depresión
#H0: M_antes <= M_despues vs H_a: M_antes > M_despues
#H0: M_diff <= 0 vs H_a: M_diff > 0
#H0: b0 <= 0 vs H_a: b0 > 0
K=matrix(c(1), ncol=1, nrow=1, byrow=TRUE)
m=c(0)
summary(glht(fit1, linfct=K, rhs=m, alternative="grater"))
depresion_data$diff <- depresion_data$x - depresion_data$y
#Creando el modelo de regresion lineal
fit1 <- lm(diff ~ 1, data = depresion_data)
#Viendo el resumen del modelo
summary(fit1)
K=matrix(c(1), ncol=1, nrow=1, byrow=TRUE)
m=c(0)
summary(glht(fit1, linfct=K, rhs=m, alternative="grater"))
K=matrix(c(1), ncol=1, nrow=1, byrow=TRUE)
m=c(0)
summary(glht(fit1, linfct=K, rhs=m, alternative="greater"))
wilcox.test(depresion_data$x,depresion_data$y,paired = TRUE, alternative = c("greater"), exact = FALSE, correct = TRUE)
ggpaired(Datos, cond1 = "x (Antes)", cond2 = "y (Después)",
color = "condition", line.color = "gray", line.size = 0.4)+
stat_compare_means(method = "wilcox.test", paired=TRUE, method.args = list(alternative = "less"))
ggpaired(Datos, cond1 = "x ", cond2 = "y",
color = "condition", line.color = "gray", line.size = 0.4)+
stat_compare_means(method = "wilcox.test", paired=TRUE, method.args = list(alternative = "less"))
library(multcomp)
library(ggplot2)
library(ggpubr)
ggpaired(Datos, cond1 = "x ", cond2 = "y",
color = "condition", line.color = "gray", line.size = 0.4)+
stat_compare_means(method = "wilcox.test", paired=TRUE, method.args = list(alternative = "less"))
ggpaired(depresion_data, cond1 = "x ", cond2 = "y",
color = "condition", line.color = "gray", line.size = 0.4)+
stat_compare_means(method = "wilcox.test", paired=TRUE, method.args = list(alternative = "less"))
install.packages("ggpubr")
library(multcomp)
library(ggplot2)
library(ggpubr)
ggpaired(depresion_data, cond1 = "x ", cond2 = "y",
color = "condition", line.color = "gray", line.size = 0.4)+
stat_compare_means(method = "wilcox.test", paired=TRUE, method.args = list(alternative = "less"))
ggpaired(depresion_data, cond1 = "x", cond2 = "y",
color = "condition", line.color = "gray", line.size = 0.4) +
stat_compare_means(method = "wilcox.test", paired = TRUE,
method.args = list(alternative = "less"))
#Haciendo una grafica  para comparar los resultados de los pacientes
ggpaired(depresion_data, cond1 = "x", cond2 = "y",
color = "tratamiento", line.color = "gray", line.size = 0.4) +
stat_compare_means(method = "wilcox.test", paired = TRUE,
method.args = list(alternative = "less"))
#Haciendo una grafica  para comparar los resultados de los pacientes
ggpaired(depresion_data, cond1 = "x", cond2 = "y",
color = "condition", line.color = "gray", line.size = 0.4) +
stat_compare_means(method = "wilcox.test", paired = TRUE,
method.args = list(alternative = "less"))
#Limpiamos entorno
rm(list = ls(all.names = TRUE))
gc() #Liberamos memoria
tinytex::install_tinytex(force = TRUE)
knitr::opts_chunk$set(
error = F,
fig.align = "center",
fig.dim = c(7, 7),
message = FALSE,
warning = FALSE,
include = FALSE
)
setwd("C:/Users/ferna/Documents/Seminario Estadistica/EjercicioExtra1") #Cargando de donde voy a traer los datos
#Cargamos nuestras librerías
library(ggplot2)
library(dplyr)
mean(datos$salario) #Media de los salarios
#Limpiamos entorno
rm(list = ls(all.names = TRUE))
gc() #Liberamos memoria
tinytex::install_tinytex(force = TRUE)
```{R setup, include=FALSE}
```{R setup, include=FALSE}
```{R, echo=FALSE}
#Limpiamos entorno
rm(list = ls(all.names = TRUE))
gc() #Liberamos memoria
tinytex::install_tinytex(force = TRUE)
## Haciendo un analisis descriptivo de los datos
### Calculando varianza y media sin distinguir entre sexo
### Calculando varianza y media separando entre Hombres y Mujeres
```{R}
#Limpiamos entorno
rm(list = ls(all.names = TRUE))
gc() #Liberamos memoria
tinytex::install_tinytex(force = TRUE)
tinytex::install_tinytex(force = TRUE)
---
title: "Analisis equidad en empresa"
```{R, echo=FALSE}
setwd("C:/Users/ferna/Documents/Seminario Estadistica/EjercicioExtra1") #Cargando de donde voy a traer los datos
datos <- read.csv("./salarios.csv") #Cargando los datos
datos$sexo <- factor(datos$sexo, levels = c(1, 2), labels = c("Hombre", "Mujer"))
#Agrupando los datos por sexo
datos %>%
group_by(sexo) %>%
summarise_all(mean) -> datos.summary
## Haciendo un analisis descriptivo de los datos
### Calculando varianza y media sin distinguir entre sexo
```{R echo=TRUE}
mean(datos$salario) #Media de los salarios
var(datos$salario) #Varianza de los salarios
mean(datos$salario) #Media de los salarios
var(datos$salario) #Varianza de los salarios
### Calculando varianza y media separando entre Hombres y Mujeres
```{R}
### Grafica para poder visualizar los resultado anteriores
```{R}
## Haciendo Boxplot, para poder ver los datos
```{R}
```{R}
ggplot(datos, aes(x = sexo, y = anios_trabajo, fill = sexo)) +
geom_boxplot() +
geom_point(data = datos, aes(x = sexo, y = anios_trabajo)) +
labs(
title = "Años de trabajo por sexo"
)
ggplot(datos, aes(x = sexo, y = anios_trabajo, fill = sexo)) +
geom_boxplot() +
geom_point(data = datos, aes(x = sexo, y = anios_trabajo)) +
labs(
title = "Años de trabajo por sexo"
)
View(datos)
View(datos.summary)
print(paste("Media de los salarios", mean(datos$salario)))
print(paste("Varianza de los salarios",var(datos$salario)))
print(paste("Media de los salarios", round(mean(datos$salario) ,2) ))
print(paste("Varianza de los salarios",  round(var(datos$salario) ,2)))
print(paste("Media de los salarios", round(mean(datos$salario) ,2) ))
#Codigo de Fernando Alvarado Placios
#Analisis de salarios
setwd("C:/Users/ferna/Documents/Seminario Estadistica/EjercicioExtra1")
#Cargando las librerias a usar
library(ggplot2)
library(dplyr)
#Cargando los datos
datos <- read.csv("./salarios.csv")
datos$sexo <- factor(datos$sexo, levels = c(1, 2), labels = c("Hombre", "Mujer"))
#Agrupando los datos por sexo
datos %>%
group_by(sexo) %>%
summarise_all(mean) -> datos.summary
#Haciendo un analisis estadistico de los datos
mean(datos$salario) #Media de los salarios
var(datos$salario) #Varianza de los salarios
#Separando por hombres y mujeres
datos.summary  # 1 significa hombre y 2 mujer
#Grafica para poder visualizar los resultado anteriores
x11()
ggplot(datos, aes(x = anios_trabajo, y =  salario, color = sexo)) +
geom_point() +
geom_point(data = datos.summary, shape=15, size=5)  +
labs(
title = "Comparacion años de trabajo y salario por sexo"
)
#En esta grafica podemos ver la media de salarios y de años de trabajo por sexo, donde en promedio a los hombre les pagan mas con menos años de experiencia que a las mujeres
#Hacineod un boxpllot
x11()
ggplot(datos, aes(x = sexo, y = salario, fill = sexo)) +
geom_boxplot() +
geom_point(data = datos, aes(x = sexo, y = salario)) +
labs(
title = "Salarios por sexo"
)
# En esta grafica podemos ver que aunque la media de los salarios sean parecidos, los hombres tienen un mayor rango de salarios que las mujeres
ggplot(datos, aes(x = sexo, y = anios_trabajo, fill = sexo)) +
geom_boxplot() +
geom_point(data = datos, aes(x = sexo, y = anios_trabajo)) +
labs(
title = "Años de trabajo por sexo"
)
#Con esta grafica podemos ver que en promedio los hombres  contratados cuantan con menos años de experiencia que las mujeres
#Conclusion
#Con los datos proporcionados por la empresa, podemos ver que en general los los salarios no dependen de los años de antiguedad, si no por el sexo ya que los hombre gana mas con menos años de experiencia que las mujeres
#Politica que debe cambiar para tener una equidad de genero en la empresa
#Codigo de Fernando Alvarado Placios
#Analisis de salarios
setwd("C:/Users/ferna/Documents/Seminario Estadistica/EjercicioExtra1")
#Cargando las librerias a usar
library(ggplot2)
library(dplyr)
#Cargando los datos
datos <- read.csv("./salarios.csv")
datos$sexo <- factor(datos$sexo, levels = c(1, 2), labels = c("Hombre", "Mujer"))
#Agrupando los datos por sexo
datos %>%
group_by(sexo) %>%
summarise_all(mean) -> datos.summary
#Haciendo un analisis estadistico de los datos
mean(datos$salario) #Media de los salarios
var(datos$salario) #Varianza de los salarios
#Separando por hombres y mujeres
datos.summary  # 1 significa hombre y 2 mujer
#Grafica para poder visualizar los resultado anteriores
ggplot(datos, aes(x = anios_trabajo, y =  salario, color = sexo)) +
geom_point() +
geom_point(data = datos.summary, shape=15, size=5)  +
labs(
title = "Comparacion años de trabajo y salario por sexo"
)
#En esta grafica podemos ver la media de salarios y de años de trabajo por sexo, donde en promedio a los hombre les pagan mas con menos años de experiencia que a las mujeres
#Hacineod un boxpllot
ggplot(datos, aes(x = sexo, y = salario, fill = sexo)) +
geom_boxplot() +
geom_point(data = datos, aes(x = sexo, y = salario)) +
labs(
title = "Salarios por sexo"
)
# En esta grafica podemos ver que aunque la media de los salarios sean parecidos, los hombres tienen un mayor rango de salarios que las mujeres
ggplot(datos, aes(x = sexo, y = anios_trabajo, fill = sexo)) +
geom_boxplot() +
geom_point(data = datos, aes(x = sexo, y = anios_trabajo)) +
labs(
title = "Años de trabajo por sexo"
)
#Con esta grafica podemos ver que en promedio los hombres  contratados cuantan con menos años de experiencia que las mujeres
#Conclusion
#Con los datos proporcionados por la empresa, podemos ver que en general los los salarios no dependen de los años de antiguedad, si no por el sexo ya que los hombre gana mas con menos años de experiencia que las mujeres
#Politica que debe cambiar para tener una equidad de genero en la empresa
#Codigo de Fernando Alvarado Placios
#Analisis de salarios
setwd("C:/Users/ferna/Documents/Seminario Estadistica/EjercicioExtra1")
#Cargando las librerias a usar
library(ggplot2)
library(dplyr)
#Cargando los datos
datos <- read.csv("./salarios.csv")
datos$sexo <- factor(datos$sexo, levels = c(1, 2), labels = c("Hombre", "Mujer"))
#Agrupando los datos por sexo
datos %>%
group_by(sexo) %>%
summarise_all(mean) -> datos.summary
#Haciendo un analisis estadistico de los datos
mean(datos$salario) #Media de los salarios
var(datos$salario) #Varianza de los salarios
#Separando por hombres y mujeres
datos.summary  # 1 significa hombre y 2 mujer
#Grafica para poder visualizar los resultado anteriores
ggplot(datos, aes(x = anios_trabajo, y =  salario, color = sexo)) +
geom_point() +
geom_point(data = datos.summary, shape=15, size=5)  +
labs(
title = "Comparacion años de trabajo y salario por sexo"
)
#En esta grafica podemos ver la media de salarios y de años de trabajo por sexo, donde en promedio a los hombre les pagan mas con menos años de experiencia que a las mujeres
#Hacineod un boxpllot
ggplot(datos, aes(x = sexo, y = salario, fill = sexo)) +
geom_boxplot() +
geom_point(data = datos, aes(x = sexo, y = salario)) +
labs(
title = "Salarios por sexo"
)
# En esta grafica podemos ver que aunque la media de los salarios sean parecidos, los hombres tienen un mayor rango de salarios que las mujeres
ggplot(datos, aes(x = sexo, y = anios_trabajo, fill = sexo)) +
geom_boxplot() +
geom_point(data = datos, aes(x = sexo, y = anios_trabajo)) +
labs(
title = "Años de trabajo por sexo"
)
#Con esta grafica podemos ver que en promedio los hombres  contratados cuantan con menos años de experiencia que las mujeres
#Conclusion
#Con los datos proporcionados por la empresa, podemos ver que en general los los salarios no dependen de los años de antiguedad, si no por el sexo ya que los hombre gana mas con menos años de experiencia que las mujeres
#Politica que debe cambiar para tener una equidad de genero en la empresa
